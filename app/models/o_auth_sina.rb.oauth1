require 'net/http/post/multipart'
require 'multipart_post_helper.rb'
class OAuthSina < OAuthProvider
  NAME = "新浪微博"
  
  def initialize
    super
    @provider_id = "sina"
    @key = "179937101"
    @secret = "808df73bab895435cde7e1a4131a8ab6"
    @params = {:site => "http://api.t.sina.com.cn", :scheme => :query_string}
    @api_userinfo = '/account/verify_credentials.json'
    @api_scheme = :header
  end

  def parse_user_id(userinfo)
    #@user_id = userinfo['domain'].blank? ? userinfo['id'] : userinfo['domain']
    @user_id = userinfo['id']
    @username = userinfo['screen_name']
  end
   
  def get_user_url(user_id)
    ret = "http://t.sina.com.cn/#{user_id}"
  end
   
  def parse_user_default(userinfo)
    user_default = {}
    user_id = (userinfo['domain'].blank? ? userinfo['id'] : userinfo['domain']).to_s
    user_default[:username] = userinfo['screen_name'][0,20] if userinfo['screen_name']
    user_default[:bio] = userinfo['description'][0,160] if userinfo['description']
    user_default[:name] = userinfo['name'][0,20] if userinfo['name']
    user_default[:location] = userinfo['location'][0,45] if userinfo['location']
    user_default[:web] = userinfo['url'][0,100] if userinfo['url']
    user_default[:photo] = userinfo['profile_image_url'][0,500] if userinfo['profile_image_url']
    user_default
  end
  
  def sync(upload_url, iu, setting)
    status = "##{iu.app.name}# #{upload_url} #{iu.content}"
    #post status
    parameters = {:status => status}
    access_token = OAuth::AccessToken.new(get_consumer, setting.get_token(@provider_id), setting.get_secret(@provider_id))
    resp = access_token.post("/statuses/update.json", parameters, {})
    resp
    
#    #post status and upload photo    
#    file = File.new("public#{iu.url}", "rb")
#    url = URI.parse('http://api.t.sina.com.cn/statuses/upload.json')
#    data = {"status" => status}
#    data.merge!({"lat" => iu.latitude, "long" => iu.longitude}) if iu.latitude && iu.longitude
#    req = Net::HTTP::Post::Multipart.new url.request_uri, {
#      "pic" => UploadIO.new(file, "image/jpeg", file.path)
#    }.merge(data)
#    @params = {:site => "http://api.t.sina.com.cn", :scheme => :header}
#    consumer = get_consumer
#    access_token = OAuth::AccessToken.new(consumer, setting.get_token(@provider_id), setting.get_secret(@provider_id))
#    consumer.sign!(req, access_token, :multipart_form_params => data)
#    resp = nil
#    Net::HTTP.new(url.host, url.port).start do |http|
#      resp = http.request(req) # process request
#    end  
#    resp    
  end

  def delete(status_id, setting)
    return unless status_id
    access_token = OAuth::AccessToken.new(get_consumer, setting.get_token(@provider_id), setting.get_secret(@provider_id))
    resp = access_token.post("/statuses/destroy/#{status_id}.json", {}, {})
    resp
  end

  def get_following_ids(user)
    ret = nil
    resp = get_api_access_token(user).get("/statuses/friends.json?count=#{FRIENDS_LIMIT}")
    if resp.class == Net::HTTPOK
      users = JSON.parse(resp.body)
      ret = users.collect {|u| u['domain'].blank? ? u['id'] : u['domain']}
    end
    ret
  end

  def get_follower_ids(user)
    ret = nil
    resp = get_api_access_token(user).get("/statuses/followers.json?count=#{FRIENDS_LIMIT}")
    if resp.class == Net::HTTPOK
      users = JSON.parse(resp.body)
      ret = users.collect {|u| u['domain'].blank? ? u['id'] : u['domain']}
    end
    ret
  end
 
end